# Readme.md

This is a manual on how to use and get the best usage of this automatic application.

## Types of Errors

### Error Exit:
1. **OSError** - Base class for errors related to input/output operations.
2. **FileNotFoundError** - Raised when a file or directory is not found. It is a subclass of OSError.
3. **PermissionError** - Raised when you try to perform an operation on a file or directory without the necessary permissions. Is a subclass of OSError.
4. **EOFError** - Raised when the `input()` function reaches the end of the file (EOF) without reading any data.
5. **BlockingIOError** - Raised when an I/O operation is blocked. It is a subclass of OSError.
6. **IsADirectoryError** - Raised when a file operation is performed on a directory. It is a subclass of OSError.
7. **RuntimeError** - Raised when an error is detected that doesnâ€™t fall in any of the other categories.
8. **ValueError** - Raised when a function receives an argument of the right type but inappropriate value.
9. **TypeError** - Raised when an operation or function is applied to an object of inappropriate type.
10. **IndexError** - Raised when a sequence subscript is out of range.
11. **KeyError** - Raised when a dictionary key is not found.
12. **AttributeError** - Raised when an invalid attribute reference is made.
13. **ImportError** - Raised when an import statement fails to find the module definition.
14. **NameError** - Raised when a local or global name is not found.
15. **SyntaxError** - Raised when the parser encounters a syntax error.
16. **IndentationError** - A subclass of SyntaxError raised when indentation is not consistent.
17. **StopIteration** - Raised to signal the end of an iterator.
18. **ZeroDivisionError** - Raised when dividing by zero.
19. **OverflowError** - Raised when the result of an arithmetic operation is too large to be expressed within the range of the integer type.
20. **MemoryError** - Raised when an operation runs out of memory.